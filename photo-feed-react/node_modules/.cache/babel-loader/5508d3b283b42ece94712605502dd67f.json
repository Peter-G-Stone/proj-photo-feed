{"ast":null,"code":"import { API_URL } from './apiUrl';\nimport * as types from './actionTypes';\n\nvar authRequest = function authRequest() {\n  return {\n    type: types.AUTHENTICATION_REQUEST\n  };\n};\n\nvar authSuccess = function authSuccess(user, token) {\n  return {\n    type: types.AUTHENTICATION_SUCCESS,\n    user: user,\n    token: token\n  };\n};\n\nvar authFailure = function authFailure(errors) {\n  return {\n    type: types.AUTHENTICATION_FAILURE,\n    errors: errors\n  };\n};\n\nexport var logout = function logout() {\n  return function (dispatch) {\n    localStorage.clear();\n    return dispatch({\n      type: types.LOGOUT\n    });\n  };\n};\nexport var signup = function signup(user) {\n  var newUser = user;\n  return function (dispatch) {\n    return fetch(\"\".concat(API_URL, \"/users\"), {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: user\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jresp) {\n      dispatch(authenticate({\n        name: newUser.name,\n        email: newUser.email,\n        password: newUser.password\n      }));\n    }).catch(function (errors) {\n      dispatch(authFailure(errors));\n    });\n  };\n};\nexport var authenticate = function authenticate(credentials, history) {\n  debugger;\n  return function (dispatch) {\n    dispatch(authRequest());\n    return fetch(\"\".concat(API_URL, \"/user_token\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        auth: credentials\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (response) {\n      var token = response.jwt;\n      debugger;\n      localStorage.setItem('token', token);\n      history.push('/');\n      return getUser(credentials);\n    }).then(function (user) {\n      console.log(user);\n      dispatch(authSuccess(user, localStorage.token));\n    }).catch(function (errors) {\n      dispatch(authFailure(errors));\n      localStorage.clear();\n    });\n  };\n};\nexport var getUser = function getUser(credentials) {\n  var request = new Request(\"\".concat(API_URL, \"/find_user\"), {\n    method: \"POST\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \".concat(localStorage.token)\n    }),\n    body: JSON.stringify({\n      user: credentials\n    })\n  });\n  return fetch(request).then(function (response) {\n    return response.json();\n  }).then(function (userJson) {\n    return userJson;\n  }).catch(function (error) {\n    return error;\n  });\n};","map":{"version":3,"sources":["/Users/peter/Development/code/proj-photo-feed/photo-feed-react/src/actions/authActions.js"],"names":["API_URL","types","authRequest","type","AUTHENTICATION_REQUEST","authSuccess","user","token","AUTHENTICATION_SUCCESS","authFailure","errors","AUTHENTICATION_FAILURE","logout","dispatch","localStorage","clear","LOGOUT","signup","newUser","fetch","method","headers","body","JSON","stringify","then","response","json","jresp","authenticate","name","email","password","catch","credentials","history","auth","res","jwt","setItem","push","getUser","console","log","request","Request","Headers","userJson","error"],"mappings":"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","sourcesContent":["import { API_URL } from './apiUrl'\nimport * as types from './actionTypes'\n\nconst authRequest = () => {\n  return {\n    type: types.AUTHENTICATION_REQUEST\n  }\n}\n\nconst authSuccess = (user, token) => {\n  return {\n    type: types.AUTHENTICATION_SUCCESS,\n    user: user,\n    token: token\n  }\n}\n\nconst authFailure = (errors) => {\n  return {\n    type: types.AUTHENTICATION_FAILURE,\n    errors: errors\n  }\n}\n\nexport const logout = () => {\n  return dispatch => {\n    localStorage.clear();\n    return dispatch({\n      type: types.LOGOUT\n    });\n  }\n}\n\nexport const signup = (user) => {\n  const newUser = user\n  return dispatch => {\n    return fetch(`${API_URL}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\":\"application/json\",\n        \"Content-Type\":\"application/json\"\n      },\n      body: JSON.stringify({user: user})\n    })\n      .then(response => response.json())\n      .then(jresp => {\n        dispatch(authenticate({\n          name: newUser.name,\n          email: newUser.email,\n          password: newUser.password})\n        );\n      })\n      .catch((errors) => {\n        dispatch(authFailure(errors))\n      })\n  };\n}\n\nexport const authenticate = (credentials, history) => {\n    debugger\n  return dispatch => {\n    dispatch(authRequest())\n    return fetch(`${API_URL}/user_token`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({auth: credentials})\n    })\n      .then(res => res.json())\n      .then((response) => {\n          const token = response.jwt;\n          debugger\n          localStorage.setItem('token', token);\n          history.push('/')\n          return getUser(credentials)\n      })\n      .then((user) => {\n        console.log(user)\n          dispatch(authSuccess(user, localStorage.token))\n      })\n      .catch((errors) => {\n          dispatch(authFailure(errors))\n          localStorage.clear()\n      })\n  }\n}\n\nexport const getUser = (credentials) => {\n  const request = new Request(`${API_URL}/find_user`, {\n    method: \"POST\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${localStorage.token}`,\n    }),\n    body: JSON.stringify({user: credentials})\n  })\n  return fetch(request)\n    .then(response => response.json())\n    .then(userJson => {return userJson})\n    .catch(error => {\n      return error;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}